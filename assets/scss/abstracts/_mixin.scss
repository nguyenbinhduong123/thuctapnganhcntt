@mixin transition($value) {
    transition: $value;
    -webkit-transition: $value;
    -moz-transition: $value;
    -ms-transition: $value;
    -o-transition: $value;
}

@mixin widthCalc($value) {
    width: calc(#{$value});
    width: -webkit-calc(#{$value});
    width: -moz-calc(#{$value});
    width: -ms-calc(#{$value});
    width: -o-calc(#{$value});
}

@mixin opacity($value){
    opacity: $value;
    $opcity-fillter: $value * 100;
    filter: alpha(opacity= $opcity-fillter);
}

@mixin borderRadius($value) {
    border-radius: $value;
    -webkit-border-radius: $value;
    -moz-border-radius: $value;
    -ms-border-radius: $value;
    -o-border-radius: $value;
}

@mixin translate($x, $y) {
    transform: translate($x, $y);
    -webkit-transform: translate($x, $y);
    -moz-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    -o-transform: translate($x, $y);
}

@mixin boxShadow($value) {
    box-shadow: $value;
    -webkit-box-shadow: $value;
    -moz-box-shadow: $value;
    -ms-box-shadow: $value;
    -o-box-shadow: $value;
}

@mixin heightCalc($value) {
    height: calc(#{$value});
    height: -webkit-calc(#{$value});
    height: -moz-calc(#{$value});
    height: -ms-calc(#{$value});
    height: -o-calc(#{$value});
}

@mixin splitText($row, $maxHeight){
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $row;
    -webkit-box-orient: vertical;
    max-height: $maxHeight;
}

@mixin transform($value) {
    transform: $value;
    -webkit-transform: $value;
    -moz-transform: $value;
    -ms-transform: $value;
    -o-transform: $value;
}

@mixin appearanceInput($value) {
    appearance: $value;
    -webkit-appearance: $value;
    -moz-appearance: $value;
    -ms-appearance: $value;
    -o-appearance: $value;
}

@mixin objectFit($value) {
    object-fit: $value;
    -webkit-object-fit: $value;
    -moz-object-fit: $value;
    -ms-object-fit: $value;
    -o-object-fit: $value;
}

@mixin propertyAllCode($property, $value) {
    #{$property}: $value;
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
}

@mixin calc($type, $value) {
    #{$type}: calc(#{$value});
    #{$type}: -webkit-calc(#{$value});
    #{$type}: -moz-calc(#{$value});
    #{$type}: -ms-calc(#{$value});
    #{$type}: -o-calc(#{$value});
}

@mixin bgGradient($value) {
    background-image: -webkit-linear-gradient($value);
    background-image: -moz-linear-gradient($value);
    background-image: -ms-linear-gradient($value);
    background-image: -o-linear-gradient($value);
    background-image: linear-gradient($value);
}

@mixin flex($value) {
    flex: $value;
    -webkit-flex: $value;
    -moz-flex: $value;
    -ms-flex: $value;
    -o-flex: $value;
    max-width: $value;
}

@mixin order($value) {
    -webkit-box-ordinal-group: $value + 1;
    -ms-flex-order: $value;;
    order: $value;
}

@mixin clearfix() {
    &::after {
        display: block;
        content: "";
        clear: both;
    }
}

@mixin placeholderColor($color) {
    &::placeholder {
        color:$color;
        opacity: 1;
    }
    
    &:-ms-input-placeholder {
        color: $color;
    }
    
    &::-ms-input-placeholder {
        color: $color;
    }
}

@mixin customTable1() {
    table {
        width: 100%;
        border-collapse: collapse;

        th,
        td {
            padding: 10px 15px;
            border: 1px solid #eeeeee;
        }
    }
}

@mixin customText1() {
    font-size: 16px;
    color: $color6;
    text-align: justify;

    b,
    strong {
        font-weight: 700;
    }
    
    ul,
    p {
        margin: 0 0 15px 0;

        &:last-child {
            margin-bottom: 0;
        }
    }

    img {
        max-width: 100%;
        height: auto;
    }

    a {
        @include transition(0.5s);
        text-decoration: underline;
    }
}

@function creatNameFontWeight($weight) {
    $nameFontWeight: '';

    @if $weight == 100 {
        $nameFontWeight: Thin;
    }

    @if $weight == 200 {
        $nameFontWeight: ExtraLight;
    }

    @if $weight == 300 {
        $nameFontWeight: Light;
    }

    @if $weight == 400 {
        $nameFontWeight: Regular;
    }

    @if $weight == 500 {
        $nameFontWeight: Medium;
    }

    @if $weight == 600 {
        $nameFontWeight: SemiBold;
    }

    @if $weight == 700 {
        $nameFontWeight: Bold;
    }

    @if $weight == 800 {
        $nameFontWeight: ExtraBold;
    }

    @if $weight == 900 {
        $nameFontWeight: 'Black';
    }

    @return $nameFontWeight;
}

@mixin renderUrlFont($nameFont, $fontWeights) {
    @each $weight in $fontWeights {
        $nameFontWeight: creatNameFontWeight($weight);

        $typeFont: 'ttf';

        @if($nameFont == 'Gotham') {
            $typeFont: 'otf';
        }
    
        @font-face {
            font-family: $nameFont;
            font-weight: $weight;
            src: url(../fonts/#{$nameFont}-#{$nameFontWeight}.#{$typeFont});
        }
    }
}

@mixin renderFontDetail($nameFont, $weight, $italic, $typeFont) {
    @font-face {
        font-family: $nameFont;
        font-weight: $weight;

        $nameFontWeight: creatNameFontWeight($weight);

        @if($italic == 'italic') {
            font-style: italic;

            $nameFontWeight: $nameFontWeight + 'Italic';
        }

        src: url(../fonts/#{$nameFont}-#{$nameFontWeight}.#{$typeFont});
    }
}

@mixin title1() {
    font-size: 40px;
    font-weight: 700;
    color: $color1;
    margin: 0;
    text-transform: uppercase;
    line-height: 1.6;

    p {
        margin: 0;
    }
}

@mixin wrapText1() {
    font-size: 20px;
    color: $color1;
    margin-top: 6px;

    p {
        margin: 0;
    }
}